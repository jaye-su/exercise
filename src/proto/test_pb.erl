%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.1
-module(test_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'Person'() ::
      #{age                     := integer(),       % = 1, 32 bits
        name                    := iodata()         % = 2
       }.
-type 'Family'() ::
      #{person                  => ['Person'()]     % = 1
       }.
-export_type(['Person'/0, 'Family'/0]).

-spec encode_msg('Person'() | 'Family'(),'Person' | 'Family') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg('Person'() | 'Family'(),'Person' | 'Family', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' -> e_msg_Person(Msg, TrUserData);
      'Family' -> e_msg_Family(Msg, TrUserData)
    end.



e_msg_Person(Msg, TrUserData) ->
    e_msg_Person(Msg, <<>>, TrUserData).


e_msg_Person(#{age := F1, name := F2}, Bin,
	     TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_Family(Msg, TrUserData) ->
    e_msg_Family(Msg, <<>>, TrUserData).


e_msg_Family(#{} = M, Bin, TrUserData) ->
    case M of
      #{person := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_Family_person(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

e_mfield_Family_person(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Person(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Family_person([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Family_person(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_Family_person(Rest, Bin3, TrUserData);
e_field_Family_person([], Bin, _TrUserData) -> Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' ->
	  try d_msg_Person(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Person', {Class, Reason, StackTrace}}}})
	  end;
      'Family' ->
	  try d_msg_Family(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Family', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_Person(Bin, TrUserData) ->
    dfp_read_field_def_Person(Bin, 0, 0,
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Person(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Person_age(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_Person(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Person_name(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_Person(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{age => F@_1, name => F@_2};
dfp_read_field_def_Person(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_Person(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_Person(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Person(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_Person(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Person_age(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_Person_name(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Person(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Person(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Person(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_Person(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_Person(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Person(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{age => F@_1, name => F@_2}.

d_field_Person_age(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Person_age(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_Person_age(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_Person(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_Person_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Person_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_Person_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_Person(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_Person(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_Person(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_Person(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Person(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_Person(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Person(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_Person(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Person(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_Person(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_Person(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_msg_Family(Bin, TrUserData) ->
    dfp_read_field_def_Family(Bin, 0, 0, id([], TrUserData),
			      TrUserData).

dfp_read_field_def_Family(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Family_person(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Family(<<>>, 0, 0, R1, TrUserData) ->
    #{person => lists_reverse(R1, TrUserData)};
dfp_read_field_def_Family(Other, Z1, Z2, F@_1,
			  TrUserData) ->
    dg_read_field_def_Family(Other, Z1, Z2, F@_1,
			     TrUserData).

dg_read_field_def_Family(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Family(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
dg_read_field_def_Family(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Family_person(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Family(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Family(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Family(Rest, 0, 0, F@_1,
					     TrUserData);
	    3 ->
		skip_group_Family(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Family(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Family(<<>>, 0, 0, R1, TrUserData) ->
    #{person => lists_reverse(R1, TrUserData)}.

d_field_Family_person(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Family_person(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Family_person(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Person(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Family(RestF, 0, 0,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Family(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    skip_varint_Family(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Family(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    dfp_read_field_def_Family(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_length_delimited_Family(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Family(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
skip_length_delimited_Family(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Family(Rest2, 0, 0, F@_1,
			      TrUserData).

skip_group_Family(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Family(Rest, 0, Z2, F@_1,
			      TrUserData).

skip_32_Family(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_Family(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_64_Family(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_Family(Rest, Z1, Z2, F@_1,
			      TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' -> merge_msg_Person(Prev, New, TrUserData);
      'Family' -> merge_msg_Family(Prev, New, TrUserData)
    end.

merge_msg_Person(#{}, #{age := NFage, name := NFname},
		 _) ->
    #{age => NFage, name => NFname}.

merge_msg_Family(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{person := PFperson}, #{person := NFperson}} ->
	  S1#{person =>
		  'erlang_++'(PFperson, NFperson, TrUserData)};
      {_, #{person := NFperson}} -> S1#{person => NFperson};
      {#{person := PFperson}, _} -> S1#{person => PFperson};
      {_, _} -> S1
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' -> v_msg_Person(Msg, ['Person'], TrUserData);
      'Family' -> v_msg_Family(Msg, ['Family'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Person/3}).
v_msg_Person(#{age := F1, name := F2} = M, Path, _) ->
    v_type_int32(F1, [age | Path]),
    v_type_string(F2, [name | Path]),
    lists:foreach(fun (age) -> ok;
		      (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Person(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [age, name] -- maps:keys(M), 'Person'},
		  M, Path);
v_msg_Person(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Person'}, X, Path).

-dialyzer({nowarn_function,v_msg_Family/3}).
v_msg_Family(#{} = M, Path, TrUserData) ->
    case M of
      #{person := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_Person(Elem, [person | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Person'}}, F1,
			       [person | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (person) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Family(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Family'},
		  M, Path);
v_msg_Family(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Family'}, X, Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'Person'},
      [#{name => age, fnum => 1, rnum => 2, type => int32,
	 occurrence => required, opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => required, opts => []}]},
     {{msg, 'Family'},
      [#{name => person, fnum => 1, rnum => 2,
	 type => {msg, 'Person'}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() -> ['Person', 'Family'].


get_group_names() -> [].


get_msg_or_group_names() -> ['Person', 'Family'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Person') ->
    [#{name => age, fnum => 1, rnum => 2, type => int32,
       occurrence => required, opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => required, opts => []}];
find_msg_def('Family') ->
    [#{name => person, fnum => 1, rnum => 2,
       type => {msg, 'Person'}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.0.1".

gpb_version_as_list() ->
    [4,0,1].
